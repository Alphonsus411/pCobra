name: Build & Release CLI Binaries

permissions:
  contents: read

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build (${{ matrix.os }} / ${{ matrix.mac_arch || 'x64' }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            shell: bash
          - os: windows-latest
            shell: pwsh
          # mac: build both arm64 (Apple Silicon) and x86_64 (Intel)
          - os: macos-latest
            shell: bash
            mac_arch: arm64
          - os: macos-13
            shell: bash
            mac_arch: x86_64

    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # Fijado a commit para seguridad de la cadena de suministro
        with:
          fetch-depth: 0

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.11'
          cache: 'pip'              # speeds up installs
          cache-dependency-path: |
            requirements.txt
            requirements-*.txt

      - name: Show Python info
        shell: ${{ matrix.shell }}
        run: |
          python -V
          python -c "import sys,platform;print(sys.executable);print(platform.platform())"

      - name: Install dependencies
        shell: ${{ matrix.shell }}
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      # Optional: ensure PyInstaller present if your build script assumes it
      - name: Ensure build toolchain
        shell: ${{ matrix.shell }}
        run: |
          pip install --no-cache-dir pyinstaller

      # macOS: set the target architecture for PyInstaller via env if you use it
      - name: Build CLI
        shell: ${{ matrix.shell }}
        env:
          PYINSTALLER_ARCH: ${{ matrix.mac_arch || '' }}
        run: ${{ runner.os == 'Windows' && './scripts/build_cli.ps1' || './scripts/build_cli.sh' }}

      - name: List dist
        if: always()
        shell: ${{ matrix.shell }}
        run: |
          echo "Artifacts in dist/:"
          ls -la dist || dir dist

      - name: Upload executable(s)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: cobra-cli-${{ runner.os }}${{ matrix.mac_arch && format('-{0}', matrix.mac_arch) || '' }}
          path: dist/**
          if-no-files-found: error
          retention-days: 14

  release:
    name: Release (tagged builds)
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # required for GH Release
    steps:
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate checksums
        shell: bash
        run: |
          cd dist
          shopt -s nullglob
          for file in *; do
            if [[ -f "$file" && "$file" != *.sha256 ]]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done
          ls -la

      - name: Release assets
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: dist/**
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
