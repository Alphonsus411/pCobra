Metadata-Version: 2.1
Name: Cobra
Version: 0.1
Summary: Un lenguaje de programación en español para simulaciones y más.
Home-page: https://github.com/Alphonsus411/pCobra
Author: Adolfo González Hernández
Author-email: adolfogonzal@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: pytest>=7.0
Requires-Dist: numpy>=1.22.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: tensorflow>=2.6.0
Requires-Dist: dask>=2021.09.0
Requires-Dist: DEAP>=1.3.1

# Proyecto Cobra

Cobra es un lenguaje de programaciÃ³n diseÃ±ado en espaÃ±ol, con un enfoque en la creaciÃ³n de herramientas, simulaciones y anÃ¡lisis en Ã¡reas como biologÃ­a, computaciÃ³n y astrofÃ­sica. Este proyecto incluye un lexer y un parser robusto, que permite la interpretaciÃ³n y ejecuciÃ³n de un subconjunto del lenguaje definido.

## Tabla de Contenidos

- [DescripciÃ³n del Proyecto](#descripciÃ³n-del-proyecto)
- [InstalaciÃ³n](#instalaciÃ³n)
- [Estructura del Proyecto](#estructura-del-proyecto)
- [CaracterÃ­sticas Principales](#caracterÃ­sticas-principales)
- [Uso](#uso)
- [Pruebas](#pruebas)
- [Contribuciones](#contribuciones)
- [Licencia](#licencia)

## DescripciÃ³n del Proyecto

Cobra estÃ¡ diseÃ±ado para facilitar la programaciÃ³n en espaÃ±ol, permitiendo que los desarrolladores utilicen un lenguaje mÃ¡s accesible para aquellos que no estÃ¡n familiarizados con el inglÃ©s. A travÃ©s de su lexer y parser, Cobra puede analizar y ejecutar cÃ³digo, manejando variables, funciones y estructuras de control, lo que permite una amplia gama de aplicaciones.

## InstalaciÃ³n

Para instalar el proyecto, sigue estos pasos:

1. Clona el repositorio en tu mÃ¡quina local:

   ```bash
   git clone https://github.com/tu_usuario/Cobra.git
   ````
   
2. Accede al directorio del proyecto:

````bash
cd Cobra
````

3. Crea un entorno virtual y actÃ­valo:

````bash
python -m venv .venv
source .venv/bin/activate  # Para Unix
.\.venv\Scripts\activate  # Para Windows
````

4. Instala las dependencias necesarias:

````bash
pip install -r requirements.txt
````

# Estructura del Proyecto

El proyecto se organiza en las siguientes carpetas y mÃ³dulos:

- `core/`: Contiene la lÃ³gica principal del lexer y parser.
- `tests/`: Incluye pruebas unitarias para asegurar el correcto funcionamiento del cÃ³digo.
- `src/`: Carpeta principal donde se implementa la lÃ³gica del lenguaje Cobra.
- `README.md`: DocumentaciÃ³n del proyecto.
- `requirements.txt`: Archivo que lista las dependencias del proyecto.

# CaracterÃ­sticas Principales

- **Lexer y Parser**: ImplementaciÃ³n de un lexer para la tokenizaciÃ³n del cÃ³digo fuente y un parser para la construcciÃ³n de un Ã¡rbol de sintaxis abstracta (AST).
- **Manejo de Declaraciones**: Soporte para declaraciones de variables, holobits, funciones y estructuras de control como condicionales y bucles.
- **Manejo de Errores**: El sistema captura y reporta errores de sintaxis, facilitando la depuraciÃ³n.
- **VisualizaciÃ³n**: Salida detallada de tokens y errores de sintaxis para facilitar el desarrollo y la depuraciÃ³n.
- **Soporte para Llamadas a Funciones**: ImplementaciÃ³n de un sistema para manejar argumentos en llamadas a funciones.

# Uso

Para ejecutar pruebas unitarias, utiliza pytest:

````bash
pytest src/tests
````

# Ejemplo de Uso

Puedes probar el lexer y parser con un cÃ³digo como el siguiente:

````cobra
codigo = '''
var x = 10
si x > 5 :
    proyectar(x, "2D")
sino :
    graficar(x)
'''

# Inicializamos el lexer
lexer = Lexer(codigo)
tokens = lexer.analizar_token()

# Inicializamos el parser
parser = Parser(tokens)

# Ejecutar el parser
arbol = parser.parsear()
print(arbol)
````

# Pruebas

Las pruebas estÃ¡n ubicadas en la carpeta tests/ y utilizan pytest para la ejecuciÃ³n. Puedes aÃ±adir mÃ¡s pruebas para cubrir nuevos casos de uso y asegurar la estabilidad del cÃ³digo.

````bash
pytest src/tests
````

# Contribuciones

Las contribuciones son bienvenidas. Si deseas contribuir, sigue estos pasos:

- Haz un fork del proyecto.
- Crea una nueva rama (`git checkout -b feature/nueva-caracteristica`).
- Realiza tus cambios y haz commit (`git commit -m 'AÃ±adir nueva caracterÃ­stica'`).
- EnvÃ­a un pull request.

# Licencia

Este proyecto estÃ¡ bajo la Licencia MIT. Para mÃ¡s detalles, consulta el archivo LICENSE.


### Notas

- **Descripciones Detalladas**: Se han agregado secciones que explican de manera mÃ¡s completa quÃ© hace el proyecto y cÃ³mo usarlo.
- **Ejemplos de CÃ³digo**: Se ha incluido un ejemplo prÃ¡ctico que ilustra cÃ³mo usar el lexer y el parser.
- **Contribuciones**: Se ha dejado claro cÃ³mo otros pueden contribuir al proyecto.

Si deseas agregar o modificar algo, hÃ¡zmelo saber.
